use anyhow::Result;
use esp_idf_hal::{
    prelude::Peripherals,
    gpio::PinDriver
};
use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use log::*;
use max7219::*;

mod led;
use led::{RGB8, WS2812RMT};

mod dot_display;
use dot_display::DotDisplay;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_sys::link_patches();
    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();

    // The constant CONFIG is auto-generated by toml_config
    let app_config = CONFIG;
    let mut led = WS2812RMT::new(peripherals.pins.gpio18, peripherals.rmt.channel0)?;
    led.set_pixel(RGB8::new(50, 50, 0))?;

    info!("Loading with credentials, ssid:{:?} psk:{:?}", app_config.wifi_ssid, app_config.wifi_psk);

    // Setup for the MAX7219 display
    // let data = peripherals.pins.gpio0.into();
    // let cs = peripherals.pins.gpio1.into();
    // let sck = peripherals.pins.gpio2.into();
    // let display = MAX7219::from_pins(1, data, cs, sck).unwrap();

    // let mut dp = DotDisplay::from(display).unwrap();
    let data = PinDriver::output(peripherals.pins.gpio0).unwrap();
    let cs = PinDriver::output(peripherals.pins.gpio1).unwrap();
    let sck = PinDriver::output(peripherals.pins.gpio2).unwrap();
    let display = MAX7219::from_pins(1, data, cs, sck).unwrap();
    let mut dp = DotDisplay::from(display);

    let mut seed = 0;

    dp.turn_on_display()?;
    loop {
        let mut input: [u8; 8] = [0, 0, 0, 0, 0, 0, 0, 0];

        for i in 0..input.len() as usize {
            let val = (seed + i) % u8::MAX as usize;
            input[i] = val as u8;
        }

        dp.write_display(&input)?;
        seed += 1;

        if (seed % 2) == 0 {
            led.set_pixel(RGB8::new(0, 0, 50))?; // Blue
        } else {
            led.set_pixel(RGB8::new(0, 50, 0))?; // Green
        }

        std::thread::sleep(std::time::Duration::from_millis(50));
    }
}
