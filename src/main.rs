use std::str;
use anyhow::Result;
use esp_idf_hal::{
    prelude::Peripherals,
    gpio::PinDriver
};
use esp_idf_svc::{
    http::server::{Configuration, EspHttpServer},
};
use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use embedded_svc::{http::{Method, Headers}, io::{Write, Read}};
use log::*;
use max7219::*;

mod led;
use led::{RGB8, WS2812RMT};

mod dot_display;
use dot_display::DotDisplay;

mod wifi;
use wifi::Wifi;

use font8x8::{BASIC_FONTS, UnicodeFonts};

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}


fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_sys::link_patches();
    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();
    let peripherals = Peripherals::take().unwrap();

    // The constant CONFIG is auto-generated by toml_config
    let app_config = CONFIG;
    let mut led = WS2812RMT::new(peripherals.pins.gpio18, peripherals.rmt.channel0)?;
    led.set_pixel(RGB8::new(50, 50, 0))?;

    // Associate to network and obtain DHCP IP
    info!("Loading with credentials, ssid:{:?} psk:{:?}", app_config.wifi_ssid, app_config.wifi_psk);
    let mut wifi = Wifi::init(peripherals.modem, &app_config.wifi_ssid, &app_config.wifi_psk);
    Wifi::start(&mut wifi)?;


    // Setup for the MAX7219 display
    let data = PinDriver::output(peripherals.pins.gpio0).unwrap();
    let cs = PinDriver::output(peripherals.pins.gpio1).unwrap();
    let sck = PinDriver::output(peripherals.pins.gpio2).unwrap();
    let display = MAX7219::from_pins(1, data, cs, sck).unwrap();
    let mut dp = DotDisplay::from(display).expect("Failed to initialise dot-matrix");
    dp.turn_on_display().expect("Failed to turn on display");


    // Set the HTTP server
    let mut server = EspHttpServer::new(&Configuration::default())?;
    // http://<sta ip>/ handler
    server.fn_handler("/", Method::Get, |request| {
        let html = index_html();
        let mut response = request.into_ok_response()?;
        response.write_all(html.as_bytes())?;
        Ok(())
    })?;

    // http://<sta ip>/temperature handler
    server.fn_handler("/temperature", Method::Get, move |request| {
        let html = temperature(32.0);
        let mut response = request.into_ok_response()?;
        response.write_all(html.as_bytes())?;
        Ok(())
    })?;

    server.fn_handler("/example", Method::Put, |mut req| {
        let len = req.content_len().unwrap_or(0) as usize;

        let mut buf = vec![0; len];
        req.read_exact(&mut buf)?;
        let mut resp = req.into_ok_response()?;
        resp.write_all(temperature(32.0).as_bytes())?;
        info!("{:?}",  str::from_utf8(&buf)?);
        Ok(())
    })?;
    
    dp.set_brightness(80).expect("Failed to set brightness");
    let mut seed = 0;
    loop {        
        if let Some(mut glyph) = BASIC_FONTS.get(char::from_digit((seed % 10) as u32, 10).unwrap()) {
            glyph.iter_mut().for_each(|x| *x = x.reverse_bits());

            dp.write_display(&glyph).expect("Failed to write dot-matrix");
        }

        seed += 1;

        if (seed % 2) == 0 {
            led.set_pixel(RGB8::new(0, 0, 50))?; // Blue
        } else {
            led.set_pixel(RGB8::new(0, 50, 0))?; // Green
        }

        std::thread::sleep(std::time::Duration::from_secs(1));
    }
}

fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>esp-rs web server</title>
    </head>
    <body>
        {}
    </body>
</html>
"#,
        content.as_ref()
    )
}

fn index_html() -> String {
    templated("Hello from ESP32-C3!")
}

fn temperature(val: f32) -> String {
    templated(format!("Chip temperature: {:.2}Â°C", val))
}